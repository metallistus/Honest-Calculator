type: edu
files:
- name: honest_calc.py
  visible: true
  text: |
    # write your code here
    msg_0 = "Enter an equation"
    msg_1 = "Do you even know what numbers are? Stay focused!"
    msg_2 = "Yes ... an interesting math operation. You've slept through all classes, haven't you?"
    msg_3 = "Yeah... division by zero. Smart move..."

    while True:
        print(msg_0)
        x, oper, y = input().split()
        check_oper = ['+', '-', '*', '/']

        try:
            float(x) and float(y)
        except ValueError:
            print(msg_1)
        except ZeroDivisionError:
            print(msg_3)
        else:
            if oper not in check_oper:
                print(msg_2)
            else:
                if oper == '/' and float(y) == 0.0:
                    print(msg_3)
                elif oper == '+':
                    print(float(x) + float(y))
                    exit()
                elif oper == '-':
                    print(float(x) - float(y))
                    exit()
                elif oper == '*':
                    print(float(x) * float(y))
                    exit()
                elif oper == '/':
                    print(float(x) / float(y))
                    exit()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram

    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move...",
           "Do you want to store the result? (y / n):",
           "Do you want to continue calculations? (y / n):"]


    def add_enter(txt):
        return "\n".join([txt, msg[0]])


    def add_memory(txt):
        return "\n".join([txt, msg[4]])


    data = [
                (("4 * 5", add_memory("20.0")), ("y", msg[5]), ("n", "")),
                (("4 * 5.2", add_memory("20.8")), ("y", msg[5]), ("y", msg[0]),
                 ("1 + M", add_memory("21.8")), ("y", msg[5]), ("n", "")),
                (("2 + 5", add_memory("7.0")), ("n", msg[5]), ("y", msg[0]),
                 ("21.0 / M", add_enter(msg[3])), ("5 + M", add_memory("5.0")),
                 ("y", msg[5]), ("n", "")),
           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]});\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected: ({item[1]});\nFound:    ({output.strip()})")
            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")

            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15812#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    Expected: (20.0
    Do you want to store the result? (y / n):);
    Found:    (You are ... lazy
    20.0
    Do you want to store the result? (y / n):)

    Please find below the output of your program during this failed test.
    Note that the '>' character indicates the beginning of the input line.

    ---

    Enter an equation
    > 4 * 5
    You are ... lazy
    20.0
    Do you want to store the result? (y / n):
  time: Wed, 20 Apr 2022 14:20:24 UTC
record: 3
