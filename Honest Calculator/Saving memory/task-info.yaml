type: edu
files:
- name: honest_calc.py
  visible: true
  text: |
    # write your code here
    msg_0 = "Enter an equation"
    msg_1 = "Do you even know what numbers are? Stay focused!"
    msg_2 = "Yes ... an interesting math operation. You've slept through all classes, haven't you?"
    msg_3 = "Yeah... division by zero. Smart move..."
    msg_4 = "Do you want to store the result? (y / n):"
    msg_5 = "Do you want to continue calculations? (y / n):"
    msg_6 = " ... lazy"
    msg_7 = " ... very lazy"
    msg_8 = " ... very, very lazy"
    msg_9 = "You are"

    memory = 0


    def is_one_digit(v):
        if -10 < v < 10 and v.is_integer() == True:
            return True
        else:
            return False


    def check(v1, v2, v3):
        msg = ""
        if is_one_digit(v1) == True and is_one_digit(v2) == True:
            msg = msg + msg_6
        if (v1 == 1 or v2 == 1) and v3 == '*':
            msg = msg + msg_7
        if (v1 == 0 or v2 == 0) and (v3 == '*' or v3 == '-' or v3 == '+'):
            msg = msg + msg_8
        if msg != "":
            msg = msg_9 + msg
            print(msg)


    while True:
        try:
            print(msg_0)
            x, oper, y = input().split()
            if x == "M":
                x = memory
            elif y == 'M':
                y = memory
            x = float(x)
            y = float(y)
            check(x, y, oper)
            if oper == "+":
                calc = x + y
            elif oper == '-':
                calc = x - y
            elif oper == '/':
                calc = x / y
            elif oper == '*':
                calc = x * y
            else:
                raise TypeError
        except ValueError:
            print(msg_1)
        except ZeroDivisionError:
            print(msg_3)
        except TypeError:
            print(msg_2)
        else:
            print(calc)
            answer_2 = ''
            while True:
                if not answer_2 == 'n':
                    print(msg_4)
                    answer = input()
                else:
                    answer = 'n'
                if answer == 'y' or 'n':
                    if answer == 'y':
                        memory = calc
                    print(msg_5)
                    answer_2 = input()
                    if answer_2 == 'y' or 'n':
                        break
                    else:
                        answer_2 = 'n'
                        continue
                else:
                    continue
            if answer_2 == 'n':
                break
            else:
                continue
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram

    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move...",
           "Do you want to store the result? (y / n):",
           "Do you want to continue calculations? (y / n):",
           " ... lazy",
           " ... very lazy",
           " ... very, very lazy",
           "You are",
           "Are you sure? It is only one digit! (y / n)",
           "Don't be silly! It's just one number! Add to the memory? (y / n)",
           "Last chance! Do you really want to embarrass yourself? (y / n)"
    ]


    def add_enter(txt):
        return "\n".join([txt, msg[0]])


    def add_memory(txt):
        return "\n".join([txt, msg[4]])


    data = [(("4 * 5.0", "\n".join([msg[9] + msg[6], add_memory("20.0")])), ("n", msg[5]), ("n", "")),
            (("2 + 5.5", add_memory("7.5")), ("y", msg[5]), ("y", msg[0]), ("M - 9", add_memory("-1.5")), ("n", msg[5]), ("n", "")),
            (("225 / 15", add_memory("15.0")), ("y", msg[5]), ("y",msg[0]),
             ("1 * 5", "\n".join([msg[9] + msg[6] + msg[7], add_memory("5.0")])), ("y", msg[10]), ("y", msg[11]), ("n", msg[5]), ("y", msg[0]),
            ("M - 10", add_memory("5.0")), ("y", msg[10]), ("y", msg[11]), ("y", msg[12]), ("y", msg[5]), ("y", msg[0]),
             ("M / M",  "\n".join([msg[9] + msg[6], add_memory("1.0")])), ("n", msg[5]), ("n", "")),
           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]});\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected:\n{item[1]}\nFound:\n{output.strip()}")
            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")
            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15814#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 20 Apr 2022 14:59:56 UTC
record: 5
